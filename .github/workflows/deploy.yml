name: Deploy to VPS production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build Next.js app
        run: ${{ steps.detect-package-manager.outputs.runner }} next build

      - name: Create ZIP file
        run: zip -r build.zip .next

      - name: Upload ZIP file
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build.zip

  deploy:
    environment:
      name: production
      url: https://nicodigos.nicotordev.com/
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build
          path: .

      - name: Upload zip to VPS
        uses: appleboy/scp-action@v0.1.2
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "build.zip"
          target: "~/nicodigos/"

      - name: Deploy on VPS
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ~/nicodigos
            unzip -o build.zip -d .
            rm build.zip
            cat > .env << EOF
            DATABASE_URL='${{ secrets.DATABASE_URL }}'
            NEXTAUTH_URL='https://nicodigos.nicotordev.com/'
            NEXTAUTH_SECRET='${{ secrets.NEXTAUTH_SECRET }}'
            GOOGLE_CLIENT_ID='${{ secrets.GOOGLE_CLIENT_ID }}'
            GOOGLE_CLIENT_SECRET='${{ secrets.GOOGLE_CLIENT_SECRET }}'
            EOF
            chmod 600 .env
            source ~/.bashrc
            source ~/.nvm/nvm.sh
            nvm use 20
            yarn install --prod
            pm2 restart nicodigos
