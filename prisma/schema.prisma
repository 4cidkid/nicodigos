// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  firstName     String
  lastName      String
  nationalId    String?
  email         String          @unique
  password      String?
  locale        Locale          @default(ES)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  addresses Address[]
}


model Address {
  id       String   @id @default(cuid())
  firstName String
  lastName  String
  address   String
  city     String
  state    String
  zip      String
  country  String
  phone    String
  userId   String
  type     AddressType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  price       Float
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  String

  attributes ProductAttribute[]
  categories Category           @relation(fields: [categoryId], references: [id])
  subCategories Subcategory[]


  @@index([name, slug])
}

model Attribute {
  id          String   @id @default(cuid())
  name        String
  icon        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products ProductAttribute[]
}

model ProductAttribute {
  productId   String
  attributeId String
  value       String

  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attribute Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@id([productId, attributeId])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  icon        String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
  subCategories Subcategory[]
}

model Subcategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  icon        String
  image       String?
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
  category Category @relation(fields: [categoryId], references: [id])
}

enum Locale {
  EN
  ES
}

enum Role {
  ADMIN
  USER
}

enum AddressType {
  SHIPPING
  BILLING
}